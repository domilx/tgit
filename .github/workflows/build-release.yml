name: Build and Release on Windows

on:
  push:
    branches:
      - main  # or any branches you want to trigger a release

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'  # Use the version of Python you need

      - name: Install PyInstaller
        run: pip install pyinstaller

      - name: Build executable with PyInstaller
        run: pyinstaller --onefile tgit.py

      - name: Rename executable
        run: Rename-Item .\dist\tgit.exe tgit-${{ github.run_number }}.exe

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: tgit-${{ github.run_number }}.exe
          path: dist/tgit-${{ github.run_number }}.exe

  release:
    needs: build
    runs-on: windows-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: tgit-${{ github.run_number }}.exe

      - name: Create Release
        id: create_release  # This ID is used to reference output variables of this step
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release-${{ github.run_number }}  # Make sure this is a unique tag for each release
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false
          body: 'Release of version ${{ github.run_number }}'

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}  # Correctly reference the output variable
          asset_path: ./tgit-${{ github.run_number }}.exe
          asset_name: tgit-${{ github.run_number }}.exe
          asset_content_type: application/octet-stream
